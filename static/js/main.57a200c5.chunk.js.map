{"version":3,"sources":["components/app/utils/default-grid.ts","components/app/constants/game-aspect-ratio.ts","components/app/utils/get-screen-width.ts","components/app/utils/reduce-grid-to-blips.ts","components/app/hooks/use-paddle-width.ts","components/app/app.tsx","components/block/block.tsx","components/cigarette/cigarette.tsx","components/lungs/lungs.tsx","utils/service-worker.ts","index.tsx","components/app/hooks/use-style.ts"],"names":["DEFAULT_GRID","trim","split","reduce","grid","rowStr","row","startFilled","sets","map","set","parseInt","filled","i","push","GAME_ASPECT_RATIO","getScreenWidth","document","body","getBoundingClientRect","height","width","reduceRowToBlips","count","blip","reduceGridToBlips","BUTT_WIDTH","DEFAULT_GRID_BLIPS","MAX_PADDLE_WIDTH","ARROW_LEFT_KEY_CODE","ARROW_RIGHT_KEY_CODE","MIN_PADDLE_LEFT","React","memo","bottomLeft","bottomRight","topLeft","topRight","x","y","classNames","className","style","left","top","Cigarette","useMemo","Lungs","key","block","Boolean","window","location","hostname","match","ReactDOM","render","useState","keysDown","setKeysDown","screenWidth","setScreenWidth","paddleWidth","usePaddleWidth","maxHeight","Math","ceil","minHeight","maxWidth","minWidth","useStyle","handleWindowKeyDown","useCallback","e","keyCode","includes","concat","handleWindowKeyUp","filter","keyDown","handleWindowResize","newScreenWidth","useEffect","addEventListener","removeEventListener","round","paddleLeft","setPaddleLeft","length","lastKeyPressed","maxPaddleLeft","paddleOffset","interval","setInterval","max","min","clearInterval","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57a200c5.chunk.js","sourcesContent":["const DEFAULT_GRID_STR: string = `\n0:19,4,19\n0:19,4,19\n0:19,4,19\n0:19,4,19\n0:11,5,3,4,3,5,11\n0:9,8,2,4,2,8,9\n0:8,9,2,4,2,9,8\n0:7,11,1,4,1,11,7\n0:6,12,1,4,1,12,6\n0:5,13,1,4,1,13,5\n0:5,13,1,4,1,13,5\n0:4,34,4\n0:3,36,3\n0:3,36,3\n0:2,18,2,18,2\n0:2,16,6,16,2\n0:2,16,6,16,2\n0:1,17,6,17,1\n0:1,17,6,17,1\n0:1,17,6,17,1\n0:1,17,6,17,1\n0:1,17,6,17,1\n0:1,17,6,17,1\n1:18,6,18\n1:18,6,18\n1:18,6,18\n1:17,8,17\n1:17,8,17\n1:17,8,17\n1:16,10,16\n1:15,12,15\n1:14,14,14\n1:9,24,9\n0:1,4,32,4,1\n`;\n\nconst DEFAULT_GRID_ROWS_STR: string[] = DEFAULT_GRID_STR.trim().split('\\n');\n\nconst DEFAULT_GRID: boolean[][] = DEFAULT_GRID_ROWS_STR.reduce(\n  (grid: boolean[][], rowStr: string): boolean[][] => {\n    const row: boolean[] = [];\n    const [startFilled, setsStr] = rowStr.split(':');\n    const sets: number[] = setsStr\n      .split(',')\n      .map((set: string): number => parseInt(set, 10));\n    let filled = startFilled === '1';\n    for (const set of sets) {\n      for (let i = 0; i < set; i++) {\n        row.push(filled ? true : false);\n      }\n      filled = !filled;\n    }\n    grid.push(row);\n    return grid;\n  },\n  [],\n);\n\nexport default DEFAULT_GRID;\n","const GAME_ASPECT_RATIO: number = 386 / 530;\n\nexport default GAME_ASPECT_RATIO;\n","import { GAME_ASPECT_RATIO } from '../constants';\n\nexport default function getScreenWidth(): number {\n  const { height, width } = document.body.getBoundingClientRect();\n  const BODY_ASPECT_RATIO: number = width / height;\n\n  // If the screen is wider than the game, use height as the max dimension.\n  if (BODY_ASPECT_RATIO > GAME_ASPECT_RATIO) {\n    return height * GAME_ASPECT_RATIO;\n  }\n\n  // If the screen is taller than the game, use width as the max dimension.\n  return width;\n}\n","const reduceRowToBlips = (count: number, blip: boolean): number => {\n  if (blip) {\n    return count + 1;\n  }\n  return count;\n};\n\nexport default function reduceGridToBlips(\n  count: number,\n  row: boolean[],\n): number {\n  return count + row.reduce(reduceRowToBlips, 0);\n}\n","import React from 'react';\nimport { DEFAULT_GRID, reduceGridToBlips } from '../utils';\n\nconst BUTT_WIDTH = 16;\nconst DEFAULT_GRID_BLIPS: number = DEFAULT_GRID.reduce(reduceGridToBlips, 0);\nconst MAX_PADDLE_WIDTH = 64;\n\nexport default function usePaddleWidth(grid: boolean[][]): number {\n  return React.useMemo((): number => {\n    return (\n      BUTT_WIDTH +\n      (grid.reduce(reduceGridToBlips, 0) / DEFAULT_GRID_BLIPS) *\n        (MAX_PADDLE_WIDTH - BUTT_WIDTH)\n    );\n  }, [grid]);\n}\n","import React, { ReactElement, CSSProperties } from 'react';\nimport { Cigarette, Lungs } from '..';\nimport './app.css';\nimport { usePaddleWidth, useStyle } from './hooks';\nimport { DEFAULT_GRID, getScreenWidth } from './utils';\n\nconst ARROW_LEFT_KEY_CODE = 37;\nconst ARROW_RIGHT_KEY_CODE = 39;\nconst MIN_PADDLE_LEFT = 0;\n\nexport default function App(): ReactElement {\n  const [grid] = React.useState<boolean[][]>(DEFAULT_GRID);\n  const [keysDown, setKeysDown] = React.useState<number[]>([]);\n  const [screenWidth, setScreenWidth] = React.useState<number>(getScreenWidth);\n\n  const paddleWidth: number = usePaddleWidth(grid);\n  const style: CSSProperties = useStyle(screenWidth);\n\n  /*\n  const handleCollision = React.useCallback((x: number, y: number): void => {\n    setGrid(grid => [\n      ...grid.slice(0, y - 1),\n      [...grid[y].slice(0, x - 1), false, ...grid[y].slice(x, grid[y].length)],\n      ...grid.slice(y, grid.length),\n    ]);\n  }, []);\n  */\n\n  const handleWindowKeyDown = React.useCallback(\n    (e: KeyboardEvent): void => {\n      switch (e.keyCode) {\n        case ARROW_LEFT_KEY_CODE: {\n          if (!keysDown.includes(ARROW_LEFT_KEY_CODE)) {\n            setKeysDown((keysDown: number[]): number[] =>\n              keysDown.concat([ARROW_LEFT_KEY_CODE]),\n            );\n          }\n          break;\n        }\n\n        case ARROW_RIGHT_KEY_CODE: {\n          if (!keysDown.includes(ARROW_RIGHT_KEY_CODE)) {\n            setKeysDown((keysDown: number[]): number[] =>\n              keysDown.concat([ARROW_RIGHT_KEY_CODE]),\n            );\n          }\n          break;\n        }\n      }\n    },\n    [keysDown],\n  );\n\n  const handleWindowKeyUp = React.useCallback(\n    (e: KeyboardEvent): void => {\n      switch (e.keyCode) {\n        case ARROW_LEFT_KEY_CODE: {\n          if (keysDown.includes(ARROW_LEFT_KEY_CODE)) {\n            setKeysDown((keysDown: number[]): number[] =>\n              keysDown.filter(\n                (keyDown: number): boolean => keyDown !== ARROW_LEFT_KEY_CODE,\n              ),\n            );\n          }\n          break;\n        }\n\n        case ARROW_RIGHT_KEY_CODE: {\n          if (keysDown.includes(ARROW_RIGHT_KEY_CODE)) {\n            setKeysDown((keysDown: number[]): number[] =>\n              keysDown.filter(\n                (keyDown: number): boolean => keyDown !== ARROW_RIGHT_KEY_CODE,\n              ),\n            );\n          }\n          break;\n        }\n      }\n    },\n    [keysDown],\n  );\n\n  const handleWindowResize = React.useCallback((): void => {\n    const newScreenWidth: number = getScreenWidth();\n    if (screenWidth !== newScreenWidth) {\n      setScreenWidth(newScreenWidth);\n    }\n  }, [screenWidth]);\n\n  React.useEffect((): (() => void) => {\n    window.addEventListener('keydown', handleWindowKeyDown);\n    return (): void => {\n      window.removeEventListener('keydown', handleWindowKeyDown);\n    };\n  }, [handleWindowKeyDown]);\n\n  React.useEffect((): (() => void) => {\n    window.addEventListener('keyup', handleWindowKeyUp);\n    return (): void => {\n      window.removeEventListener('keyup', handleWindowKeyUp);\n    };\n  }, [handleWindowKeyUp]);\n\n  const [paddleLeft, setPaddleLeft] = React.useState<number>(\n    (): number => Math.round(screenWidth - paddleWidth) / 2,\n  );\n\n  React.useEffect((): void | (() => void) => {\n    if (keysDown.length > 0) {\n      const lastKeyPressed: number = keysDown[keysDown.length - 1];\n      const maxPaddleLeft: number = screenWidth - paddleWidth;\n      const paddleOffset: number =\n        lastKeyPressed === ARROW_LEFT_KEY_CODE ? -4 : 4;\n      const interval: number = window.setInterval((): void => {\n        setPaddleLeft((paddleLeft: number): number =>\n          Math.max(\n            MIN_PADDLE_LEFT,\n            Math.min(maxPaddleLeft, paddleLeft + paddleOffset),\n          ),\n        );\n      }, 20);\n      return (): void => {\n        window.clearInterval(interval);\n      };\n    }\n  }, [keysDown, paddleWidth, screenWidth]);\n\n  React.useEffect((): (() => void) => {\n    window.addEventListener('resize', handleWindowResize);\n    return (): void => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [handleWindowResize]);\n\n  return (\n    <div className=\"app\" style={style}>\n      <Lungs grid={grid} />\n      <Cigarette left={paddleLeft} width={paddleWidth} />\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport './block.css';\n\ninterface Props {\n  bottomLeft: boolean;\n  bottomRight: boolean;\n  topLeft: boolean;\n  topRight: boolean;\n  x: number;\n  y: number;\n}\n\nexport default React.memo(function Block({\n  bottomLeft,\n  bottomRight,\n  topLeft,\n  topRight,\n  x,\n  y,\n}: Props): ReactElement {\n  const classNames: string[] = ['block'];\n  if (bottomLeft) {\n    classNames.push('block__bottom-left');\n  }\n  if (bottomRight) {\n    classNames.push('block__bottom-right');\n  }\n  if (topLeft) {\n    classNames.push('block__top-left');\n  }\n  if (topRight) {\n    classNames.push('block__top-right');\n  }\n\n  return (\n    <div\n      className=\"block\"\n      style={{\n        left: `${x}em`,\n        top: `${y}em`,\n      }}\n    />\n  );\n});\n","import React, { ReactElement, CSSProperties } from 'react';\nimport './cigarette.css';\n\ninterface Props {\n  left: number;\n  width: number;\n}\n\nexport default function Cigarette({ left, width }: Props): ReactElement {\n  const style: CSSProperties = React.useMemo(\n    (): CSSProperties => ({\n      left: `${left}px`,\n      width: `${width}px`,\n    }),\n    [left, width],\n  );\n\n  return (\n    <div className=\"cigarette\" style={style}>\n      <div className=\"butt\" />\n      <div className=\"lit\" />\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { Block } from '..';\nimport './lungs.css';\n\ninterface Props {\n  grid: boolean[][];\n}\n\nexport default function Lungs({ grid }: Props): ReactElement {\n  return (\n    <div className=\"lungs\">\n      {grid.map(\n        (row: boolean[], y: number): ReactElement => (\n          <div className=\"lungs__row\" key={y}>\n            {row.map((block: boolean, x: number): null | ReactElement =>\n              block ? (\n                <Block\n                  bottomLeft={false}\n                  bottomRight={false}\n                  key={x}\n                  topLeft={false}\n                  topRight={false}\n                  x={x}\n                  y={y}\n                />\n              ) : null,\n            )}\n          </div>\n        ),\n      )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport './index.css';\nimport { unregisterServiceWorker } from './utils';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nunregisterServiceWorker();\n","import React, { CSSProperties } from 'react';\nimport { GAME_ASPECT_RATIO } from '../constants';\n\nexport default function useStyle(screenWidth: number): CSSProperties {\n  return React.useMemo(\n    (): CSSProperties => ({\n      maxHeight: `${Math.ceil(screenWidth / GAME_ASPECT_RATIO)}px`,\n      minHeight: `${Math.ceil(screenWidth / GAME_ASPECT_RATIO)}px`,\n      maxWidth: `${screenWidth}px`,\n      minWidth: `${screenWidth}px`,\n    }),\n    [screenWidth],\n  );\n}\n"],"sourceRoot":""}